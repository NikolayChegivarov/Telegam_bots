from telegram import Update
from telegram.ext import ContextTypes
from database.database_interaction import DatabaseInteraction
from keyboards import (
    get_admin_keyboard,
    get_user_keyboard,
    get_blocked_keyboard,
    administrative_keyboard,
    get_auth_keyboard,
)


# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = DatabaseInteraction()
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name
    last_name = user.last_name or ""

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º")

    try:
        if db.is_admin(user_id):
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=get_admin_keyboard())
        else:
            status = db.check_user_status(user_id)
            if status == "–ê–∫—Ç–∏–≤–Ω—ã–π":
                await update.message.reply_text("–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É!", reply_markup=get_user_keyboard())
            else:
                await update.message.reply_text(
                    "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. "
                    "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø.",
                    reply_markup=get_blocked_keyboard()
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
    finally:
        db.close()


# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
async def handle_authorize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = DatabaseInteraction()
    user = update.effective_user
    user_id = user.id

    try:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'")
        if not db.check_user_status(user_id):
            db.add_user(user_id, user.first_name, user.last_name or "")
            await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞")
        else:
            await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_authorize: {e}")
    finally:
        db.close()


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_auth_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    admin_id = query.from_user.id

    try:
        if query.data.startswith('auth_'):
            user_id = int(query.data.split('_')[1])
            db = DatabaseInteraction()

            if db.is_admin(admin_id):
                db.update_user_status(user_id, '–ê–∫—Ç–∏–≤–Ω—ã–π')
                await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            else:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            db.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_auth_callback: {e}")


# üõ† –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = DatabaseInteraction()
    user_id = update.effective_user.id

    try:
        if db.is_admin(user_id):
            await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=administrative_keyboard())
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_panel: {e}")
    finally:
        db.close()


# üë• –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)
async def add_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = DatabaseInteraction()
    admin_id = update.effective_user.id

    try:
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        if db.is_admin(admin_id):
            blocked_users = db.get_blocked_users()
            if blocked_users:
                keyboard = get_auth_keyboard(blocked_users)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
            else:
                await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ add_employee: {e}")
    finally:
        db.close()


# üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_main_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = DatabaseInteraction()
    user_id = update.effective_user.id

    try:
        if db.is_admin(user_id):
            await update.message.reply_text(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_keyboard()
            )
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_main_interface: {e}")
    finally:
        db.close()
