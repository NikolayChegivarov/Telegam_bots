# bot/handlers/report.py
# –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ¬´–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç¬ª:
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—å–±–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å Word-—Ñ–∞–π–ª.
# –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ‚Äî –∑–∞–ø—Ä–æ—Å PDF.
# –ó–∞—Ç–µ–º ‚Äî Excel.
# –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤: –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
# bot/handlers/report.py
from telegram import Update, Document
from telegram.ext import ContextTypes
import os
from bot.state_machine import ReportState
from utils.extraction import extract_from_word, extract_from_pdf, extract_from_excel
from utils.recording_data import process_template

user_states = {}
user_data = {}

async def handle_create_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = ReportState.AWAITING_WORD
    user_data[user_id] = {}
    await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, Word-—Ñ–∞–π–ª ¬´–í—ã–≥—Ä—É–∑–∫–∞ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å¬ª.")

async def handle_document_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    document: Document = update.message.document

    if not document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    file = await document.get_file()
    file_name = document.file_name
    file_path = f"temp/{user_id}_{file_name}"
    os.makedirs("temp", exist_ok=True)
    await file.download_to_drive(file_path)

    state = user_states.get(user_id)

    if state == ReportState.AWAITING_WORD:
        user_data[user_id]['word'] = file_path
        user_states[user_id] = ReportState.AWAITING_PDF
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª ¬´–í—ã–≥—Ä—É–∑–∫–∞ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å¬ª. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, PDF-—Ñ–∞–π–ª ¬´–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å¬ª.")

    elif state == ReportState.AWAITING_PDF:
        user_data[user_id]['pdf'] = file_path
        user_states[user_id] = ReportState.AWAITING_EXCEL
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª ¬´–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –ö–æ–Ω—Ç—É—Ä.–§–æ–∫—É—Å¬ª.\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, Excel-—Ñ–∞–π–ª ¬´–í—ã–≥—Ä—É–∑–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤¬ª.")

    elif state == ReportState.AWAITING_EXCEL:
        user_data[user_id]['excel'] = file_path
        user_states[user_id] = ReportState.COMPLETE
        await update.message.reply_text("üì• –í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            word_data = extract_from_word(user_data[user_id]['word'])
            pdf_data = extract_from_pdf(user_data[user_id]['pdf'])
            excel_data = extract_from_excel(user_data[user_id]['excel'])

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
            combined_data = {**word_data, **pdf_data, **excel_data}

            # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
            template_path = "—à–∞–±–ª–æ–Ω.docx"

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            success = process_template(template_path, None, combined_data)

            if success:
                await update.message.reply_text("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É Reports.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)

    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π ¬´–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç¬ª.")
