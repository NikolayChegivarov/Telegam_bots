from aiogram import Router, F
from aiogram.types import Message  # CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import connect_to_database
from keyboards import get_cancel_kb, get_admin_kb
import logging
from utils import is_admin

router = Router()
logger = logging.getLogger(__name__)


class AdminStates(StatesGroup):
    waiting_for_master_id = State()
    waiting_for_service_name = State()
    waiting_for_service_price = State()
    waiting_for_service_duration = State()


@router.message(F.text == 'üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞')
async def add_master(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(AdminStates.waiting_for_master_id)


@router.message(AdminStates.waiting_for_master_id)
async def process_master_id(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    master_id = int(message.text)
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT 1 FROM users WHERE id_user_telegram = %s", (master_id,))
            if not cursor.fetchone():
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
                await state.clear()
                return

            cursor.execute(
                "UPDATE users SET id_user_type = 2 WHERE id_user_telegram = %s",
                (master_id,)
            )
            conn.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {master_id} —Ç–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä!", reply_markup=get_admin_kb())

            try:
                await message.bot.send_message(
                    master_id,
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞—Å –º–∞—Å—Ç–µ—Ä–æ–º –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã. "
                    "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –º–∞—Å—Ç–µ—Ä–∞."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
    finally:
        conn.close()
    await state.clear()


@router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É')
async def add_service(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:", reply_markup=get_cancel_kb())
    await state.set_state(AdminStates.waiting_for_service_name)


@router.message(AdminStates.waiting_for_service_name)
async def process_service_name(message: Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AdminStates.waiting_for_service_price)


@router.message(AdminStates.waiting_for_service_price)
async def process_service_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö).")
        return

    price = int(message.text)
    if price <= 0:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(price=price)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    await state.set_state(AdminStates.waiting_for_service_duration)


@router.message(AdminStates.waiting_for_service_duration)
async def process_service_duration(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö).")
        return

    duration = int(message.text)
    if duration <= 0:
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO services (name, price, duration) VALUES (%s, %s, %s)",
                (data['name'], data['price'], duration)
            )
            conn.commit()

            await message.answer(
                f"‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                f"–¶–µ–Ω–∞: {data['price']} —Ä—É–±.\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω.",
                reply_markup=get_admin_kb()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()
        await state.clear()


def register_admin_handlers(dp):
    dp.include_router(router)