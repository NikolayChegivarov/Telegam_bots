from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç StatesGroup
from database import connect_to_database
from keyboards import get_client_main_menu, get_master_main_menu, get_admin_kb, get_cancel_kb, edit_profile_menu
# from dotenv import load_dotenv
import os
import re
import logging

router = Router()
logger = logging.getLogger(__name__)


class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_last_name = State()
    waiting_for_phone = State()


@router.message(F.text == '/start')
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Ç–∏–ø (–ö–ª–∏–µ–Ω—Ç, –ú–∞—Å—Ç–µ—Ä, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) –∏
      –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é.
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞
      –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –º–µ–Ω—é.
    - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT u.id_user_type, s.status_user 
                FROM users u
                JOIN status s ON u.id_status = s.id_status
                WHERE u.id_user_telegram = %s
            """, (message.from_user.id,))
            user = cursor.fetchone()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {user}")
            ADMINS = list(map(int, os.getenv("ADMIN", "").split(",")))
            user_info = message.from_user  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            user_id = user_info.id
            # first_name = user_info.first_name
            # last_name = user_info.last_name
            # username = user_info.username

            if user:
                if user[0] == 1:    # –ö–ª–∏–µ–Ω—Ç
                    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!", reply_markup=get_client_main_menu())
                elif user[0] == 2:  # –ú–∞—Å—Ç–µ—Ä
                    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–∞—Å—Ç–µ—Ä–∞!", reply_markup=get_master_main_menu())
                elif user[0] == 3:  # –ê–¥–º–∏–Ω
                    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_kb())
            elif user_id in ADMINS:
                cursor.execute(
                    "INSERT INTO users (id_user_telegram, first_name, last_name, id_user_type) VALUES (%s, %s, %s, 3)",
                    (message.from_user.id, message.from_user.first_name, message.from_user.last_name)
                )
                conn.commit()
                await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_kb())
            else:
                cursor.execute(
                    "INSERT INTO users (id_user_telegram, first_name, last_name, id_user_type) VALUES (%s, %s, %s, 1)",
                    (message.from_user.id, message.from_user.first_name, message.from_user.last_name)
                )
                conn.commit()
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.",
                                     reply_markup=get_client_main_menu())
    finally:
        conn.close()


@router.message(F.text == '/help')
async def cmd_help(message: Message):
    await message.answer("""
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
    """)


@router.message(F.text == 'üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT u.first_name, u.last_name, u.phone, s.status_user 
                FROM users u
                JOIN status s ON u.id_status = s.id_status
                WHERE u.id_user_telegram = %s
            """, (message.from_user.id,))
            user = cursor.fetchone()

            if user:
                text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user[0]}\n–§–∞–º–∏–ª–∏—è: {user[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
                await message.answer(text, reply_markup=edit_profile_menu())
            else:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        conn.close()


cancel_filter = F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"])


@router.message(cancel_filter)
async def handle_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_main_menu())


@router.message(F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è')
async def request_name(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_cancel_kb())
    await state.set_state(ProfileStates.waiting_for_name)


@router.message(F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é')
async def request_last_name(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=get_cancel_kb())
    await state.set_state(ProfileStates.waiting_for_last_name)


@router.message(F.text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
async def request_phone(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=get_cancel_kb())
    await state.set_state(ProfileStates.waiting_for_phone)


@router.message(ProfileStates.waiting_for_name)
async def update_name(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    name = message.text
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET first_name = %s WHERE id_user_telegram = %s",
                (name, message.from_user.id)
            )
            conn.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ!", reply_markup=get_client_main_menu())
    finally:
        conn.close()
    await state.clear()


@router.message(ProfileStates.waiting_for_last_name)
async def update_last_name(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    last_name = message.text
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET last_name = %s WHERE id_user_telegram = %s",
                (last_name, message.from_user.id)
            )
            conn.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ!", reply_markup=get_client_main_menu())
    finally:
        conn.close()
    await state.clear()


@router.message(ProfileStates.waiting_for_phone)
async def update_phone(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    phone = message.text.strip()
    cleaned_phone = re.sub(r'[^\d+]', '', phone)

    if not is_valid_phone(cleaned_phone):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: +79161234567 –∏–ª–∏ 89161234567"
        )
        return

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET phone = %s WHERE id_user_telegram = %s",
                (cleaned_phone, message.from_user.id)
            )
            conn.commit()
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_client_main_menu())
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Error saving phone number: {e}")
    finally:
        conn.close()
    await state.clear()


def is_valid_phone(phone: str) -> bool:
    """
    –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - +79161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7)
    - 89161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 7)
    - 79161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä)

    –ù–æ–º–µ—Ä–∞ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (9161234567) –ù–ï –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!
    """
    cleaned_phone = re.sub(r'[^\d+]', '', phone)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (+7...)
    if cleaned_phone.startswith('+'):
        return (
                len(cleaned_phone) == 12  # +7 + 10 —Ü–∏—Ñ—Ä
                and cleaned_phone[1:].isdigit()  # –ø–æ—Å–ª–µ + —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                and cleaned_phone[1] == '7'  # –∫–æ–¥ –†–æ—Å—Å–∏–∏
        )

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (8... –∏–ª–∏ 7...)
    elif len(cleaned_phone) == 11:
        return (
                cleaned_phone[0] in ('7', '8')  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
                and cleaned_phone.isdigit()  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        )

    # 3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (10 —Ü–∏—Ñ—Ä, 9 —Ü–∏—Ñ—Ä, –±—É–∫–≤—ã –∏ —Ç.–¥.) ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    return False


def register_common_handlers(dp):
    dp.include_router(router)