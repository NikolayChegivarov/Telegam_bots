from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import connect_to_database
from keyboards import get_client_main_menu, get_cancel_kb, get_services_kb, get_confirm_appointment_kb

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


class ClientStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_service = State()
    waiting_for_date = State()
    waiting_for_time = State()


@router.message(F.text == 'üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def show_client_profile(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT u.first_name, u.last_name, u.phone, s.status_user 
                FROM users u
                JOIN status s ON u.id_status = s.id_status
                WHERE u.id_user_telegram = %s
            """, (message.from_user.id,))
            user = cursor.fetchone()

            if user:
                text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user[0]}\n–§–∞–º–∏–ª–∏—è: {user[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–°—Ç–∞—Ç—É—Å: {user[3]}"
                await message.answer(text)
            else:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        conn.close()


@router.message(F.text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
async def request_phone(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=get_cancel_kb())
    await state.set_state(ClientStates.waiting_for_phone)


@router.message(ClientStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    if not phone.replace('+', '').isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET phone = %s WHERE id_user_telegram = %s",
                (phone, message.from_user.id)
            )
            conn.commit()
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_client_main_menu())
    finally:
        conn.close()
    await state.clear()


@router.message(F.text == 'üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã')
async def show_services(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id_services, name, price, duration FROM services")
            services = cursor.fetchall()

            if services:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_services_kb(services))
            else:
                await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    finally:
        conn.close()


@router.callback_query(F.data.startswith('service_'))
async def service_selected(callback: CallbackQuery, state: FSMContext):
    service_id = callback.data.split('_')[1]
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM services WHERE id_services = %s", (service_id,))
            service = cursor.fetchone()

            if service:
                service_info = (
                    f"<b>{service[1]}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {service[2]} —Ä—É–±.\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service[3]} –º–∏–Ω.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É?"
                )
                await callback.message.answer(
                    service_info,
                    reply_markup=get_confirm_appointment_kb(service_id)
                )
    finally:
        conn.close()
    await callback.answer()


@router.message(F.text == 'üíá –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_client_appointments(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT r.id_record, s.name, u.first_name, u.last_name, r.date, r.time 
                FROM record r
                JOIN services s ON r.id_service = s.id_services
                JOIN users u ON r.id_master = u.id_user_telegram
                WHERE r.id_client = %s AND r.date >= CURRENT_DATE
                ORDER BY r.date, r.time
            """, (message.from_user.id,))
            appointments = cursor.fetchall()

            if appointments:
                text = "üìÖ –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
                for app in appointments:
                    text += f"üîπ {app[1]} —É {app[2]} {app[3]}\nüìÖ {app[4].strftime('%d.%m.%Y')} –≤ {app[5].strftime('%H:%M')}\n\n"
                await message.answer(text)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()


def register_client_handlers(dp):
    dp.include_router(router)
