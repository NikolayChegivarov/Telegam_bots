from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, date, time, timedelta
from database import connect_to_database
from keyboards import (
    get_client_main_menu,
    get_cancel_kb,
    get_services_kb,
    get_confirm_appointment_kb,
    get_masters_kb,
    get_dates_kb,
    get_times_kb
)
import re
import logging
from typing import Optional

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
router = Router()


class ClientStates(StatesGroup):
    waiting_for_service = State()
    waiting_for_master = State()
    waiting_for_date = State()
    waiting_for_time = State()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def validate_date(date_str: str) -> Optional[date]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    try:
        return datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        return None


async def validate_time(time_str: str) -> Optional[time]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        return datetime.strptime(time_str, '%H:%M').time()
    except ValueError:
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É
@router.message(F.text == 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É')
async def start_appointment_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É"""
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            cursor.execute("SELECT id_services, name, price, duration FROM services")
            services = cursor.fetchall()

            if services:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_services_kb(services))
                await state.set_state(ClientStates.waiting_for_service)
            else:
                await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    finally:
        conn.close()


@router.callback_query(ClientStates.waiting_for_service, F.data.startswith('service_'))
async def service_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_id = int(callback.data.split('_')[1])
    await state.update_data(service_id=service_id)

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT id_user_telegram, first_name, last_name 
                FROM users 
                WHERE id_user_type = 2 AND id_status = 1
            """)  # –ú–∞—Å—Ç–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            masters = cursor.fetchall()

            if masters:
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=get_masters_kb(masters))
                await state.set_state(ClientStates.waiting_for_master)
            else:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")
                await state.clear()
    finally:
        conn.close()
    await callback.answer()


@router.callback_query(ClientStates.waiting_for_master, F.data.startswith('master_'))
async def master_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    master_id = int(callback.data.split('_')[1])
    await state.update_data(master_id=master_id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (—Å–µ–≥–æ–¥–Ω—è + 14 –¥–Ω–µ–π)
    today = datetime.now().date()
    dates = [
        (today + timedelta(days=i)).strftime('%d.%m.%Y')
        for i in range(1, 15)
    ]

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_dates_kb(dates))
    await state.set_state(ClientStates.waiting_for_date)
    await callback.answer()


@router.callback_query(ClientStates.waiting_for_date, F.data.startswith('date_'))
async def date_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    date_str = callback.data.split('_')[1]
    selected_date = await validate_date(date_str)

    if not selected_date:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(date=selected_date)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è (—Å 10:00 –¥–æ 20:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —á–∞—Å)
    times = [f"{hour}:00" for hour in range(10, 20)]

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=get_times_kb(times))
    await state.set_state(ClientStates.waiting_for_time)
    await callback.answer()


@router.callback_query(ClientStates.waiting_for_time, F.data.startswith('time_'))
async def time_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    time_str = callback.data.split('_')[1]
    selected_time = await validate_time(time_str)

    if not selected_time:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    service_id = data['service_id']
    master_id = data['master_id']
    selected_date = data['date']

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("""
                SELECT 1 FROM record 
                WHERE id_master = %s AND date = %s AND time = %s
            """, (master_id, selected_date, selected_time))

            if cursor.fetchone():
                await callback.message.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            cursor.execute("SELECT name, price FROM services WHERE id_services = %s", (service_id,))
            service = cursor.fetchone()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            cursor.execute("SELECT first_name, last_name FROM users WHERE id_user_telegram = %s", (master_id,))
            master = cursor.fetchone()

            if service and master:
                confirmation_text = (
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
                    f"üîπ –£—Å–ª—É–≥–∞: {service[0]}\n"
                    f"üíµ –¶–µ–Ω–∞: {service[1]} —Ä—É–±.\n"
                    f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master[0]} {master[1]}\n"
                    f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {selected_time.strftime('%H:%M')}"
                )

                await callback.message.answer(
                    confirmation_text,
                    reply_markup=get_confirm_appointment_kb(service_id, master_id, selected_date, selected_time)
                )
    finally:
        conn.close()
    await callback.answer()


@router.callback_query(F.data.startswith('confirm_'))
async def confirm_appointment(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    _, service_id, master_id, date_str, time_str = callback.data.split('_')
    selected_date = await validate_date(date_str)
    selected_time = await validate_time(time_str)

    if not selected_date or not selected_time:
        await callback.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO record 
                (id_service, id_client, id_master, date, time) 
                VALUES (%s, %s, %s, %s, %s)
            """, (
                int(service_id),
                callback.from_user.id,
                int(master_id),
                selected_date,
                selected_time
            ))
            conn.commit()

            await callback.message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!",
                reply_markup=get_client_main_menu()
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ utils.notify_master_about_appointment)
    finally:
        conn.close()
    await state.clear()
    await callback.answer()


@router.message(F.text == 'üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã')
async def show_services(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id_services, name, price, duration FROM services")
            services = cursor.fetchall()

            if services:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_services_kb(services))
            else:
                await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    finally:
        conn.close()


@router.callback_query(F.data.startswith('service_'))
async def service_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_id = int(callback.data.split('_')[1])
    await state.update_data(service_id=service_id)

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            cursor.execute("SELECT name, price, duration FROM services WHERE id_services = %s", (service_id,))
            service = cursor.fetchone()

            if service:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
                cursor.execute("""
                    SELECT id_user_telegram, first_name, last_name 
                    FROM users 
                    WHERE id_user_type = 2 AND id_status = 1
                """)
                masters = cursor.fetchall()

                if masters:
                    await callback.message.answer(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <b>{service[0]}</b>\n"
                        f"üí∞ –¶–µ–Ω–∞: {service[1]} —Ä—É–±.\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service[2]} –º–∏–Ω.\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
                        reply_markup=get_masters_kb(masters)
                    )
                    await state.set_state(ClientStates.waiting_for_master)
                else:
                    await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
            else:
                await callback.message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    finally:
        conn.close()
    await callback.answer()


@router.message(F.text == 'üíá –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_client_appointments(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT r.id_record, s.name, u.first_name, u.last_name, r.date, r.time 
                FROM record r
                JOIN services s ON r.id_service = s.id_services
                JOIN users u ON r.id_master = u.id_user_telegram
                WHERE r.id_client = %s AND r.date >= CURRENT_DATE
                ORDER BY r.date, r.time
            """, (message.from_user.id,))
            appointments = cursor.fetchall()

            if appointments:
                text = "üìÖ –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
                for app in appointments:
                    text += f"üîπ {app[1]} —É {app[2]} {app[3]}\nüìÖ {app[4].strftime('%d.%m.%Y')} –≤ {app[5].strftime('%H:%M')}\n\n"
                await message.answer(text)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()


def register_client_handlers(dp):
    dp.include_router(router)