from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import connect_to_database
from keyboards import get_client_main_menu, get_cancel_kb, get_services_kb, get_confirm_appointment_kb, edit_profile_menu
import re
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


class ClientStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_last_name = State()
    waiting_for_phone = State()
    waiting_for_service = State()
    waiting_for_date = State()
    waiting_for_time = State()


@router.message(F.text == 'üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def show_client_profile(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT u.first_name, u.last_name, u.phone, s.status_user 
                FROM users u
                JOIN status s ON u.id_status = s.id_status
                WHERE u.id_user_telegram = %s
            """, (message.from_user.id,))
            user = cursor.fetchone()

            if user:
                text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user[0]}\n–§–∞–º–∏–ª–∏—è: {user[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
                await message.answer(text, reply_markup=edit_profile_menu())
            else:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        conn.close()


@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def request_phone(message: Message, state: FSMContext):
    await message.answer("–î–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_main_menu())
    await state.set_state(ClientStates.waiting_for_phone)


@router.message(F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è')
async def request_phone(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_cancel_kb())
    await state.set_state(ClientStates.waiting_for_name)


@router.message(F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é')
async def request_phone(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=get_cancel_kb())
    await state.set_state(ClientStates.waiting_for_last_name)


@router.message(F.text == 'üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
async def request_phone(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=get_cancel_kb())
    await state.set_state(ClientStates.waiting_for_phone)


@router.message(ClientStates.waiting_for_name)
async def update_name(message: Message, state: FSMContext):
    name = message.text
    if name == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_main_menu())
        await state.set_state(ClientStates.waiting_for_phone)
        return
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET first_name = %s WHERE id_user_telegram = %s",
                (name, message.from_user.id)
            )
            conn.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ!", reply_markup=get_client_main_menu())
    finally:
        conn.close()
    await state.clear()


@router.message(ClientStates.waiting_for_last_name)
async def update_last_name(message: Message, state: FSMContext):
    last_name = message.text
    if last_name == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_main_menu())
        await state.set_state(ClientStates.waiting_for_phone)
        return
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET last_name = %s WHERE id_user_telegram = %s",
                (last_name, message.from_user.id)
            )
            conn.commit()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ!", reply_markup=get_client_main_menu())
    finally:
        conn.close()
    await state.clear()


@router.message(ClientStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if phone == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_main_menu())
        await state.set_state(ClientStates.waiting_for_phone)
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–ª—é—Å–∞ –≤ –Ω–∞—á–∞–ª–µ
    cleaned_phone = re.sub(r'[^\d+]', '', phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –ø–æ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if not is_valid_phone(cleaned_phone):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ü—Ä–∏–º–µ—Ä: +79161234567 –∏–ª–∏ 89161234567"
        )
        return

    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET phone = %s WHERE id_user_telegram = %s",
                (cleaned_phone, message.from_user.id)
            )
            conn.commit()
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=get_client_main_menu())
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Error saving phone number: {e}")
    finally:
        conn.close()
    await state.clear()


def is_valid_phone(phone: str) -> bool:
    """
    –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - +79161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7)
    - 89161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 7)
    - 79161234567 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 11 —Ü–∏—Ñ—Ä)

    –ù–æ–º–µ—Ä–∞ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (9161234567) **–ù–ï** –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
    cleaned_phone = re.sub(r'[^\d+]', '', phone)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (+7...)
    if cleaned_phone.startswith('+'):
        return (
                len(cleaned_phone) == 12  # +7 + 10 —Ü–∏—Ñ—Ä
                and cleaned_phone[1:].isdigit()  # –ø–æ—Å–ª–µ + —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                and cleaned_phone[1] == '7'  # –∫–æ–¥ –†–æ—Å—Å–∏–∏
        )

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (8... –∏–ª–∏ 7...)
    elif len(cleaned_phone) == 11:
        return (
                cleaned_phone[0] in ('7', '8')  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
                and cleaned_phone.isdigit()  # —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        )

    # 3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (10 —Ü–∏—Ñ—Ä, 9 —Ü–∏—Ñ—Ä, –±—É–∫–≤—ã –∏ —Ç.–¥.) ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    return False


@router.message(F.text == 'üìã –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã')
async def show_services(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id_services, name, price, duration FROM services")
            services = cursor.fetchall()

            if services:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=get_services_kb(services))
            else:
                await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    finally:
        conn.close()


@router.callback_query(F.data.startswith('service_'))
async def service_selected(callback: CallbackQuery, state: FSMContext):
    service_id = callback.data.split('_')[1]
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM services WHERE id_services = %s", (service_id,))
            service = cursor.fetchone()

            if service:
                service_info = (
                    f"<b>{service[1]}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {service[2]} —Ä—É–±.\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service[3]} –º–∏–Ω.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É?"
                )
                await callback.message.answer(
                    service_info,
                    reply_markup=get_confirm_appointment_kb(service_id)
                )
    finally:
        conn.close()
    await callback.answer()


@router.message(F.text == 'üíá –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_client_appointments(message: Message):
    conn = connect_to_database()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT r.id_record, s.name, u.first_name, u.last_name, r.date, r.time 
                FROM record r
                JOIN services s ON r.id_service = s.id_services
                JOIN users u ON r.id_master = u.id_user_telegram
                WHERE r.id_client = %s AND r.date >= CURRENT_DATE
                ORDER BY r.date, r.time
            """, (message.from_user.id,))
            appointments = cursor.fetchall()

            if appointments:
                text = "üìÖ –í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
                for app in appointments:
                    text += f"üîπ {app[1]} —É {app[2]} {app[3]}\nüìÖ {app[4].strftime('%d.%m.%Y')} –≤ {app[5].strftime('%H:%M')}\n\n"
                await message.answer(text)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
    finally:
        conn.close()


def register_client_handlers(dp):
    dp.include_router(router)
