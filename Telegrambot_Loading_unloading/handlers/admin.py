from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import OrderStates

router = Router()


# –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó
@router.message(F.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù")
async def create_order(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏:")
    await state.set_state(OrderStates.waiting_type_of_task)

@router.message(OrderStates.waiting_type_of_task)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(type_of_task=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    await state.set_state(OrderStates.waiting_date_of_destination)

@router.message(OrderStates.waiting_date_of_destination)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(date_of_destination=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    await state.set_state(OrderStates.waiting_appointment_time)

@router.message(OrderStates.waiting_appointment_time)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(appointment_time=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(OrderStates.waiting_description)

@router.message(OrderStates.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ê–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–π:")
    await state.set_state(OrderStates.waiting_main_address)

@router.message(OrderStates.waiting_main_address)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(main_address=message.text)
    await message.answer("–ê–¥—Ä–µ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π:")
    await state.set_state(OrderStates.waiting_additional_address)

@router.message(OrderStates.waiting_additional_address)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(additional_address=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫.")
    await state.set_state(OrderStates.waiting_required_workers)

@router.message(OrderStates.waiting_required_workers)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(required_workers=message.text)
    await message.answer("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.")


