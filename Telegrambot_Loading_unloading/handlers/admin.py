import asyncio
from datetime import datetime, timedelta, time
from aiogram import F, types, Router, Bot
from aiogram.client import bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from config import Config
from keyboards.admin_kb import get_admin_keyboard
from keyboards.executor_kb import acquaintance_keyboard
from states import OrderStates
from database import create_task, change_status_user, get_all_users_type

router = Router()

async def send_temp_message(
    bot: Bot,
    chat_id: int,
    text: str,
    delete_after: int = 5  # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª–∏—Ç—å
):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å—á–µ–∑–∞–µ—Ç. """
    msg = await bot.send_message(chat_id, text)
    await asyncio.sleep(delete_after)
    await bot.delete_message(chat_id, msg.message_id)

# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ù–ò–ö–ê
@router.callback_query(F.data.startswith("add_worker_"))
async def add_worker_callback(callback: types.CallbackQuery, bot: Bot):
    await callback.answer()  # –≠—Ç–æ —É–±–µ—Ä–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    user_id = int(callback.data.split("_")[2])
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–∞ –ê–∫—Ç–∏–≤–Ω—ã–π.
    change_status_user(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—á–µ–∑–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    for admin_id in Config.get_admins():
        try:
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—è–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {callback.from_user.id}"
            # if admin_id != callback.from_user.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ–±—è
            await send_temp_message(bot, admin_id, text, delete_after=5)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–æ–±—Ä–∏–≤—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É.
    try:
        worker_message = (
            "–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏. –ü–æ—Ä–∞–±–æ—Ç–∞–µ–º! üí™ "
            "–ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—è–≤–∫–∞–º–∏ "
            "–∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–ª–∞—Ç—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è."
        )
        await bot.send_message(
            chat_id=user_id,
            text=worker_message,
            reply_markup=acquaintance_keyboard()
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É {user_id}: {e}")
        for admin_id in Config.get_admins():
            await bot.send_message(
                chat_id=admin_id,
                text=f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É {user_id}"
            )

@router.callback_query(F.data.startswith("ignore_"))
async def ignore_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.message.edit_text(
        text=f"{callback.message.text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞",
        reply_markup=None
    )
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=get_admin_keyboard()
    )


# –°–û–ó–î–ê–¢–¨ –ó–ê–ö–ê–ó
@router.message(F.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù")
async def create_order(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ü–æ–≥—Ä—É–∑–∫–∞"))
    builder.add(types.KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞"))
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.waiting_type_of_task)


@router.message(OrderStates.waiting_type_of_task)
async def process_task_type(message: types.Message, state: FSMContext):
    if message.text not in ["–ü–æ–≥—Ä—É–∑–∫–∞", "–î–æ—Å—Ç–∞–≤–∫–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return

    await state.update_data(type_of_task=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 3 –¥–Ω—è –≤–ø–µ—Ä–µ–¥)
    builder = ReplyKeyboardBuilder()
    today = datetime.now().date()
    for i in range(3):
        date = today + timedelta(days=i)
        builder.add(types.KeyboardButton(text=date.strftime("%d.%m.%Y")))
    builder.adjust(3)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.waiting_date_of_destination)


@router.message(OrderStates.waiting_date_of_destination)
async def process_date(message: types.Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(date_of_destination=date_obj)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for hour in range(8, 20, 1):  # –° 8 —É—Ç—Ä–∞ –¥–æ 8 –≤–µ—á–µ—Ä–∞ —Å —à–∞–≥–æ–º 1 —á–∞—Å
        time_str = f"{hour:02d}:00"
        builder.add(types.KeyboardButton(text=time_str))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º adjust —Ç–æ–ª—å–∫–æ –∫ –∫–Ω–æ–ø–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏ (12 –∫–Ω–æ–ø–æ–∫)
    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.row(types.KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.waiting_appointment_time)


@router.message(OrderStates.waiting_appointment_time)
async def process_time(message: types.Message, state: FSMContext):
    if message.text == "–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:50):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_custom_time)
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        time_obj = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(appointment_time=time_obj)
        await proceed_to_description(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é")


@router.message(OrderStates.waiting_custom_time)
async def process_custom_time(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        time_obj = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(appointment_time=time_obj)
        await proceed_to_description(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:50)")


async def proceed_to_description(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(OrderStates.waiting_description)


@router.message(OrderStates.waiting_custom_time)
async def process_custom_time(message: types.Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text, "%H:%M").time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (8:00-20:00)
        if time_obj < time(8, 0) or time_obj > time(19, 0):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 8:00 –∏ 20:00")
            return

        await state.update_data(appointment_time=time_obj)
        await proceed_to_description(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11:50)")


@router.message(OrderStates.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) < 10:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
        return

    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å:")
    await state.set_state(OrderStates.waiting_main_address)


@router.message(OrderStates.waiting_main_address)
async def process_main_address(message: types.Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return

    await state.update_data(main_address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(OrderStates.waiting_additional_address)


@router.message(OrderStates.waiting_additional_address)
async def process_additional_address(message: types.Message, state: FSMContext):
    additional_address = None if message.text.lower() == "–Ω–µ—Ç" else message.text
    await state.update_data(additional_address=additional_address)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (—Ü–∏—Ñ—Ä–æ–π):")
    await state.set_state(OrderStates.waiting_required_workers)


@router.message(OrderStates.waiting_required_workers)
async def process_required_workers(message: types.Message, state: FSMContext):
    try:
        workers = int(message.text)
        if workers < 1:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (1 –∏ –±–æ–ª–µ–µ)")
        return

    await state.update_data(required_workers=workers)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(OrderStates.waiting_worker_price)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ü–µ–Ω—ã


@router.message(OrderStates.waiting_worker_price)
async def process_worker_price(message: types.Message, state: FSMContext, bot: Bot):
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1500.50)")
        return

    await state.update_data(worker_price=price)
    data = await state.get_data()

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        task_id = create_task(data)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error creating task: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    task_message = (
        f"üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Ññ {task_id}!\n"
        f"üë∑üöõ–¢–∏–ø: {data['type_of_task']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date_of_destination'].strftime('%d.%m.%Y')}\n"
        f"üïí –í—Ä–µ–º—è: {data['appointment_time'].strftime('%H:%M')}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['main_address']}\n"
        f"üë• –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['required_workers']}\n"
        f"üí∏ –û–ø–ª–∞—Ç–∞: {price} —Ä—É–±./—á–µ–ª.\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º –≤–∏–¥–æ–º –∑–∞–¥–∞—á–∏.
    # –í–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –≥—Ä—É–∑—á–∏–∫–æ–≤.
    user_ids = get_all_users_type(data['type_of_task'])
    print(f"–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: ")

    # –†–∞—Å—Å—ã–ª–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–≥—Ä—É–∑–∫—É - –≥—Ä—É–∑—á–∏–∫–∞–º, –¥–æ—Å—Ç–∞–≤–∫—É - –≤–æ–¥–∏—Ç–µ–ª—è–º.
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=task_message
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(user_ids)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º!\n"
        f"{task_message}"
    )

    await state.clear()
