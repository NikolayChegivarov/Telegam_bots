import psycopg2
from psycopg2 import extras
from aiogram import Router, types, F, Bot

from config import Config
from database import get_pending_tasks, get_connection
from keyboards.executor_kb import get_executor_keyboard
from aiogram.fsm.context import FSMContext

router = Router()

@router.message(F.text == "–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å! ü§ù")
async def get_executor_authorization(message: types.Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"–ò–º—è: {first_name}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
        f"Username: {username}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞—è–≤–∫—É."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.get_admins():
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=admin_message
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")



@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á üìã")
async def all_order_executor(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    connection = None
    cursor = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        connection = get_connection()
        cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

        cursor.execute("SELECT is_loader, is_driver FROM users WHERE id_users = %s", (user_id,))
        user_data = cursor.fetchone()

        if not user_data:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        is_loader = user_data['is_loader']
        is_driver = user_data['is_driver']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        user_type = None
        if is_loader and not is_driver:
            user_type = "loader"
        elif is_driver and not is_loader:
            user_type = "driver"
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≥—Ä—É–∑—á–∏–∫ –∏ –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = get_pending_tasks(user_type)

        if not tasks:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤–∞—Å.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
        response = []
        for task in tasks:
            task_info = (
                f"üîπ –¢–∏–ø: {task['task_type']}\n"
                f"üìÖ –î–∞—Ç–∞: {task['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {task['time']}\n"
                f"üìç –ê–¥—Ä–µ—Å: {task['main_address']}"
            )
            if task['additional_address']:
                task_info += f" ({task['additional_address']})"
            task_info += (
                f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
                f"üë∑ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤: {task['required_workers']}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ —Ä–∞–±–æ—Ç—É: {task['worker_price']} —Ä—É–±.\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            response.append(task_info)

        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n\n".join(response))

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()

@router.message(F.text == "–í–∑—è—Ç—å –∑–∞–¥–∞—á—É ‚û°Ô∏è")
async def create_order(message: types.Message, state: FSMContext):
    pass

@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë®‚Äçüíª")
async def create_order(message: types.Message, state: FSMContext):
    pass