import asyncio

import psycopg2
from psycopg2 import extras
from aiogram import Router, types, F, Bot

from config import Config
from database import get_pending_tasks, get_connection, connect_to_database, add_to_assigned_performers, get_user_tasks, \
    my_data
from aiogram.fsm.context import FSMContext

from keyboards.admin_kb import authorization_keyboard
from keyboards.executor_kb import yes_no_keyboard, get_executor_keyboard, personal_office_keyboard, update_data
from states import UserRegistration, TaskNumber
from validation import validate_phone, validate_inn

router = Router()

# –ó–ê–ü–£–°–ö–ê–ï–ú –ü–†–û–¶–ï–°–° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò.
@router.message(F.text == "–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å! üë∑")
async def get_executor_authorization(message: types.Message, bot: Bot):
    print("–Ω–∞–∂–∞–ª–∏ –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å")
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!\n\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"–ò–º—è: {first_name}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
        f"Username: {username}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞—è–≤–∫—É."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in Config.get_admins():
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=authorization_keyboard(user_id)
            )
            print(f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} ")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

# –°–û–ë–ò–†–ê–ï–ú/–û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –†–ê–ë–û–¢–ù–ò–ö–ê
@router.message(F.text.in_(["–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ ü§ù", "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ü§ù"]))
async def start_registration(message: types.Message, state: FSMContext):
    await state.set_state(UserRegistration.first_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@router.message(UserRegistration.first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(UserRegistration.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

@router.message(UserRegistration.last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(UserRegistration.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79161234567 –∏–ª–∏ +7 916 123 45 67):")

@router.message(UserRegistration.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if not validate_phone(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone=message.text)
    await state.set_state(UserRegistration.is_loader)
    await message.answer("–í—ã –≥—Ä—É–∑—á–∏–∫?", reply_markup=yes_no_keyboard)

@router.message(UserRegistration.is_loader, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_is_loader(message: types.Message, state: FSMContext):
    is_loader = message.text == "–î–∞"
    await state.update_data(is_loader=is_loader)
    await state.set_state(UserRegistration.is_driver)
    await message.answer("–í—ã –≤–æ–¥–∏—Ç–µ–ª—å?", reply_markup=yes_no_keyboard)

@router.message(UserRegistration.is_driver, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_is_driver(message: types.Message, state: FSMContext):
    is_driver = message.text == "–î–∞"
    await state.update_data(is_driver=is_driver)
    await state.set_state(UserRegistration.is_self_employed)
    await message.answer("–í—ã —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π?", reply_markup=yes_no_keyboard)

@router.message(UserRegistration.is_self_employed, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_is_self_employed(message: types.Message, state: FSMContext, bot: Bot):
    is_self_employed = message.text == "–î–∞"
    await state.update_data(is_self_employed=is_self_employed)

    if is_self_employed:
        await state.set_state(UserRegistration.inn)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):", reply_markup=types.ReplyKeyboardRemove())
    else:
        await complete_registration(message, state, bot)

@router.message(UserRegistration.inn)
async def process_inn(message: types.Message, state: FSMContext, bot: Bot):
    if not validate_inn(message.text):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä:")
        return

    await state.update_data(inn=message.text)
    await complete_registration(message, state, bot)

async def complete_registration(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_name = user_data.get('first_name', '')
    last_name = user_data.get('last_name', '')
    phone = user_data.get('phone', '')
    is_loader = user_data.get('is_loader', False)
    is_driver = user_data.get('is_driver', False)
    is_self_employed = user_data.get('is_self_employed', False)
    inn = user_data.get('inn', None)
    user_id = message.from_user.id

    connection = None
    cursor = None
    try:
        connection = connect_to_database()
        if not connection:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

        cursor = connection.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT 1 FROM users WHERE id_user_telegram = %s", (user_id,))
        user_exists = cursor.fetchone()

        if user_exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                UPDATE users 
                SET first_name = %s,
                    last_name = %s,
                    phone = %s,
                    is_loader = %s,
                    is_driver = %s,
                    is_self_employed = %s,
                    inn = %s
                WHERE id_user_telegram = %s
            """, (
                first_name,
                last_name,
                phone,
                is_loader,
                is_driver,
                is_self_employed,
                inn,
                user_id
            ))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ö–æ—Ç—è –ø–æ –ª–æ–≥–∏–∫–µ –æ–Ω –¥–æ–ª–∂–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
            cursor.execute("""
                INSERT INTO users (
                    id_user_telegram,
                    first_name,
                    last_name,
                    phone,
                    is_loader,
                    is_driver,
                    is_self_employed,
                    inn
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                user_id,
                first_name,
                last_name,
                phone,
                is_loader,
                is_driver,
                is_self_employed,
                inn
            ))

        connection.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_text = (
            "üÜï –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ ID: {user_id}\n"
            f"üë®‚Äçüíº –ò–º—è: {first_name} {last_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üèó –ì—Ä—É–∑—á–∏–∫: {'‚úÖ –î–∞' if is_loader else '‚ùå –ù–µ—Ç'}\n"
            f"üöö –í–æ–¥–∏—Ç–µ–ª—å: {'‚úÖ –î–∞' if is_driver else '‚ùå –ù–µ—Ç'}\n"
            f"üíº –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {'‚úÖ –î–∞' if is_self_employed else '‚ùå –ù–µ—Ç'}\n"
            f"{'üìù –ò–ù–ù: ' + inn if is_self_employed else ''}"
        )

        # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in Config.get_admins():
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=admin_text
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üë§ –í–∞—à–µ –∏–º—è: {first_name} {last_name}\n"
            f"üìû –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üèó –ì—Ä—É–∑—á–∏–∫: {'‚úÖ –î–∞' if is_loader else '‚ùå –ù–µ—Ç'}\n"
            f"üöö –í–æ–¥–∏—Ç–µ–ª—å: {'‚úÖ –î–∞' if is_driver else '‚ùå –ù–µ—Ç'}\n"
            f"üíº –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {'‚úÖ –î–∞' if is_self_employed else '‚ùå –ù–µ—Ç'}\n"
            f"{'üìù –í–∞—à –ò–ù–ù: ' + inn if is_self_employed else ''}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
            reply_markup=get_executor_keyboard()
        )

        return True

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        if connection:
            connection.rollback()
        return False
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()
        await state.clear()


# –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–î–ê–ß–ò
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á üìã")
async def all_order_executor(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    connection = None
    cursor = None

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        connection = get_connection()
        cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

        cursor.execute("SELECT is_loader, is_driver FROM users WHERE id_user_telegram = %s", (user_id,))
        user_data = cursor.fetchone()

        if not user_data:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        is_loader = user_data['is_loader']
        is_driver = user_data['is_driver']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        user_type = None
        if is_loader and not is_driver:
            user_type = "loader"
        elif is_driver and not is_loader:
            user_type = "driver"

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = get_pending_tasks(user_type)

        if not tasks:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤–∞—Å.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
        response = []
        for task in tasks:
            task_info = (
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: {task['id_tasks']}\n"
                f"üîπ –¢–∏–ø: {task['task_type']}\n"
                f"üìÖ –î–∞—Ç–∞: {task['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {task['time']}\n"
                f"üè° –ê–¥—Ä–µ—Å: {task['main_address']}"
            )
            if task['additional_address']:
                task_info += f" ({task['additional_address']})"
            task_info += (
                f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
                f"üë∑ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤: {task['required_workers']}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ —Ä–∞–±–æ—Ç—É: {task['worker_price']} —Ä—É–±.\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            response.append(task_info)

        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n\n".join(response))

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()

# –í–ó–Ø–¢–¨ –ó–ê–î–ê–ß–£
@router.message(F.text == "–í–∑—è—Ç—å –∑–∞–¥–∞—á—É ‚û°Ô∏è")
async def take_the_task(message: types.Message, state: FSMContext):
    await state.set_state(TaskNumber.waiting_task_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å:")

@router.message(TaskNumber.waiting_task_number)
async def get_a_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    id_tasks=message.text
    status = add_to_assigned_performers(user_id, id_tasks)
    print(f"status {status}")
    await message.answer(
        text=status,
        reply_markup = get_executor_keyboard(),  # –ö–ª–∞–≤–∞
    )


@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë®‚Äçüíª")
async def personal_office(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø—Ü–∏–∏.",
        reply_markup=personal_office_keyboard()
    )

@router.message(F.text == "–ú–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ üìñ")
async def personal_office(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tasks = get_user_tasks(user_id)
    await message.answer(
        text=tasks
    )

@router.message(F.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìë")
async def my_data_executor(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = my_data(user_id)
    await message.answer(
        text=data,
        reply_markup=update_data()
    )

@router.message(F.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def basic_menu(message: types.Message, state: FSMContext):
    await message.answer(
        text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_executor_keyboard()
    )
